name: ProductService_K3S_Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test_productdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev gcc

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Run Django tests
        env:
          DATABASE_URL: postgres://postgres:testpassword@localhost:5432/test_productdb
          DJANGO_SETTINGS_MODULE: ProductService.settings
          SECRET_KEY: test-secret-key-for-github-actions
          DEBUG: False
        run: |
          python manage.py migrate
          python manage.py test
  build-and-deploy-k3s:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t productservice-backend:${{ github.sha }} .
          docker tag productservice-backend:${{ github.sha }} productservice-backend:latest

      - name: Save Docker image
        run: |
          docker save productservice-backend:latest | gzip > productservice-backend.tar.gz

      - name: Create K3s deployment package
        run: |
          mkdir -p k3s-deploy
          cp -r k8s/* k3s-deploy/
          cp productservice-backend.tar.gz k3s-deploy/
          cp docker-compose.yml k3s-deploy/
          
          # 创建部署脚本
          cat > k3s-deploy/deploy-to-k3s.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "开始部署 ProductService 到 K3s..."
          
          # 设置kubectl别名
          alias kubectl='k3s kubectl'
          
          # 加载Docker镜像到K3s
          echo "加载Docker镜像..."
          sudo k3s ctr images import productservice-backend.tar.gz
          
          # 应用K8s配置
          echo "应用K8s配置..."
          k3s kubectl apply -f postgres-data-persistentvolumeclaim.yaml
          k3s kubectl apply -f db-deployment.yaml
          k3s kubectl apply -f db-service.yaml
          
          # 等待数据库启动
          echo "等待数据库启动..."
          k3s kubectl wait --for=condition=ready pod -l io.kompose.service=db --timeout=180s
          
          # 部署后端服务
          k3s kubectl apply -f backend-deployment.yaml
          k3s kubectl apply -f backend-service.yaml
          
          # 等待后端服务启动
          echo "等待后端服务启动..."
          k3s kubectl wait --for=condition=ready pod -l io.kompose.service=backend --timeout=180s
          
          # 检查部署状态
          echo "检查部署状态..."
          k3s kubectl get pods
          k3s kubectl get services
          
          # 获取服务端口
          NODE_PORT=$(k3s kubectl get service backend -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "30800")
          echo "ProductService 部署完成！"
          echo "访问地址: http://localhost:$NODE_PORT"
          
          # 显示日志
          echo "最近的Pod日志:"
          k3s kubectl logs -l io.kompose.service=backend --tail=20
          EOF
          
          chmod +x k3s-deploy/deploy-to-k3s.sh
          
          # 打包部署文件
          tar -czf k3s-productservice-deploy.tar.gz k3s-deploy/

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to K3s Server
        run: |
          # 上传部署包到服务器
          sshpass -p "${{ secrets.ECS_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            k3s-productservice-deploy.tar.gz \
            root@${{ secrets.ECS_IP }}:/tmp/
          
          # 在服务器上执行部署
          sshpass -p "${{ secrets.ECS_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.ECS_IP }} "
            # 清理旧的部署
            rm -rf ~/productservice-k3s-deploy
            
            # 解压新的部署包
            cd ~
            tar -xzf /tmp/k3s-productservice-deploy.tar.gz
            mv k3s-deploy productservice-k3s-deploy
            cd productservice-k3s-deploy
            
            # 执行部署脚本
            ./deploy-to-k3s.sh
            
            # 清理临时文件
            rm -f /tmp/k3s-productservice-deploy.tar.gz
            
            echo 'K3s ProductService 部署完成!'
          "

      - name: Health Check
        run: |
          sleep 30
          sshpass -p "${{ secrets.ECS_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.ECS_IP }} "
            # 检查K3s集群状态
            sudo k3s kubectl get nodes
            
            # 检查服务状态
            k3s kubectl get pods -o wide
            
            # 健康检查
            for i in {1..10}; do
              if k3s kubectl get pods -l io.kompose.service=backend -o jsonpath='{.items[0].status.phase}' | grep -q Running; then
                echo 'ProductService 健康检查通过!'
                NODE_PORT=\$(k3s kubectl get service backend -o jsonpath='{.spec.ports[0].nodePort}')
                if curl -f http://localhost:\$NODE_PORT/health/ > /dev/null 2>&1; then
                  echo '应用健康检查成功!'
                  echo '服务可通过 http://服务器IP:\$NODE_PORT 访问'
                  break
                fi
              fi
              echo '等待服务启动... (\$i/10)'
              sleep 10
            done
          "
