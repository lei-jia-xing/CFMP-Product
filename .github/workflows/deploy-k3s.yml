name: Deploy to K3s

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  IMAGE_NAME: productservice-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
        docker build -t ${{ env.IMAGE_NAME }}:latest .

    - name: Save Docker image
      run: |
        docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} > productservice-image.tar

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.K3S_HOST }}
        username: ${{ secrets.K3S_USER }}
        key: ${{ secrets.K3S_SSH_KEY }}
        source: "productservice-image.tar,k8s/"
        target: "/tmp/productservice-deploy/"

    - name: Deploy to K3s
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.K3S_HOST }}
        username: ${{ secrets.K3S_USER }}
        key: ${{ secrets.K3S_SSH_KEY }}
        script: |
          set -e
          
          echo "🚀 开始部署 ProductService 到 K3s..."
          
          cd /tmp/productservice-deploy/
          
          # 加载 Docker 镜像到 containerd
          echo "加载 Docker 镜像..."
          sudo k3s ctr images import productservice-image.tar
          
          # 更新部署配置中的镜像标签
          echo "更新部署配置..."
          sed -i "s|productservice-backend:latest|${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}|g" k8s/backend-deployment.yaml
          sed -i "s|imagePullPolicy: IfNotPresent|imagePullPolicy: Never|g" k8s/backend-deployment.yaml
          
          # 删除旧的部署（如果存在）
          echo "清理旧部署..."
          sudo kubectl delete -f k8s/ --ignore-not-found=true
          sleep 5
          
          # 先部署数据库服务
          echo "部署数据库服务..."
          if [ -f k8s/db-service.yaml ]; then
            sudo kubectl apply -f k8s/db-service.yaml
          fi
          if [ -f k8s/postgres-data-persistentvolumeclaim.yaml ]; then
            sudo kubectl apply -f k8s/postgres-data-persistentvolumeclaim.yaml
          fi
          if [ -f k8s/db-deployment.yaml ]; then
            sudo kubectl apply -f k8s/db-deployment.yaml
          fi
          
          # 等待数据库就绪
          echo "等待数据库服务启动..."
          sleep 10
          
          # 部署后端应用
          echo "部署后端应用..."
          sudo kubectl apply -f k8s/backend-deployment.yaml
          sudo kubectl apply -f k8s/backend-service.yaml
          
          # 等待应用启动
          echo "等待应用启动..."
          sudo kubectl wait --for=condition=ready pod -l io.kompose.service=backend --timeout=300s
          
          # 检查部署状态
          echo "检查部署状态..."
          sudo kubectl get pods -l io.kompose.service=backend
          sudo kubectl get services
          
          # 配置服务暴露（如果需要）
          echo "配置服务访问..."
          sudo kubectl patch service backend -p '{"spec":{"type":"NodePort"}}'
          
          # 显示访问信息
          echo ""
          echo "✅ 部署完成！"
          echo "服务状态:"
          sudo kubectl get pods,svc -l io.kompose.service=backend
          
          # 获取服务访问地址
          NODE_PORT=$(sudo kubectl get service backend -o jsonpath='{.spec.ports[0].nodePort}')
          NODE_IP=$(hostname -I | awk '{print $1}')
          echo "后端服务访问地址: http://$NODE_IP:$NODE_PORT"
          
          # 清理临时文件
          rm -rf /tmp/productservice-deploy/

    - name: Health Check
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.K3S_HOST }}
        username: ${{ secrets.K3S_USER }}
        key: ${{ secrets.K3S_SSH_KEY }}
        script: |
          echo "执行健康检查..."
          
          # 等待服务完全就绪
          sleep 30
          
          # 获取服务地址
          NODE_PORT=$(sudo kubectl get service backend -o jsonpath='{.spec.ports[0].nodePort}')
          NODE_IP=$(hostname -I | awk '{print $1}')
          
          # 检查服务健康状态
          for i in {1..5}; do
            if curl -f http://$NODE_IP:$NODE_PORT/health/ 2>/dev/null; then
              echo "✅ 健康检查通过"
              break
            else
              echo "⏳ 健康检查失败，重试中... ($i/5)"
              sleep 10
            fi
          done
          
          # 显示最终状态
          echo "最终部署状态:"
          sudo kubectl get pods,svc -l io.kompose.service=backend

    - name: Rollback on failure
      if: failure()
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.K3S_HOST }}
        username: ${{ secrets.K3S_USER }}
        key: ${{ secrets.K3S_SSH_KEY }}
        script: |
          echo "🔄 部署失败，执行回滚..."
          
          # 回滚到上一个版本
          sudo kubectl rollout undo deployment/backend
          sudo kubectl rollout status deployment/backend --timeout=300s
          
          echo "回滚完成，当前状态:"
          sudo kubectl get pods -l io.kompose.service=backend

    - name: Cleanup
      if: always()
      run: |
        rm -f productservice-image.tar

    - name: Notify deployment result
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          ProductService K3s 部署完成
          环境: ${{ inputs.environment || 'staging' }}
          状态: ${{ job.status }}
          提交: ${{ github.sha }}
          作者: ${{ github.actor }}
          镜像: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
